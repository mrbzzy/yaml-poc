# This is a basic workflow to help you get started with Actions

name: Deployment on Multiple Env

on:
  push:
    branches: [ dev, prod , qa , test ]
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: 
      branch: ${{ steps.extract_branch.outputs.branch }} 
    steps:
      - name: get branch name
        shell: bash
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
     
      - name: Checking out 
        uses: actions/checkout@v2
      
      - name: JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: package application
        run: mvn package
      - name: upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: yaml-poc
          path: '${{ github.workspace }}/target/*.jar'

  
  Dev:
    runs-on: self-hosted
    environment: Development
    needs: build 
    if: ${{ needs.build.outputs.branch == 'dev' }}
    steps:
      - name: Upload application
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_IP_ADDRESS }}        
          username: ${{ secrets.DEV_AZURE_USERNAME }}      
          key: ${{ secrets.DEV_SSH_SECRET }}
          port: 22
          source: "*"      
          target: "~/source"
      - name: Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_IP_ADDRESS }}        
          username: ${{ secrets.DEV_AZURE_USERNAME }}      
          key: ${{ secrets.DEV_SSH_SECRET }}
          port: 22
          script: |
                /etc/init.d/yaml-poc stop
                mv ~/source/target/yaml-poc.jar ~/source/target/yaml-poc-old.jar
                mv ~/source/target/yaml-poc-latest.jar ~/source/target/yaml-poc.jar
                #rm -rf /etc/init.d/yaml-poc
                #ln -s -f ~/source/target/yaml-poc.jar /etc/init.d/yaml-poc
                /etc/init.d/yaml-poc start
  
  Prod:
    runs-on: self-hosted
    environment: Production
    needs: build
    if: ${{ needs.build.outputs.branch == 'prod' }}
    steps:
      - name: Upload application to Prod
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_IP_ADDRESS }}        
          username: ${{ secrets.PROD_AZURE_USERNAME }}      
          key: ${{ secrets.PROD_SSH_SECRET }}
          port: 22
          source: "*"      
          target: "~/source"
      - name: Start Service on Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_IP_ADDRESS }}        
          username: ${{ secrets.PROD_AZURE_USERNAME }}      
          key: ${{ secrets.PROD_SSH_SECRET }}
          port: 22
          script: |
                /etc/init.d/yaml-poc stop
                mv ~/source/target/yaml-poc.jar ~/source/target/yaml-poc-old.jar
                mv ~/source/target/yaml-poc-latest.jar ~/source/target/yaml-poc.jar
                #rm -rf /etc/init.d/yaml-poc
                #ln -s -f ~/source/target/yaml-poc.jar /etc/init.d/yaml-poc
                /etc/init.d/yaml-poc start
  qa:
    runs-on: self-hosted
    environment: QA
    needs: build
    if: ${{ needs.build.outputs.branch == 'qa' }}
    steps:
      - name: Upload application to QA
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.QA_IP_ADDRESS }}        
          username: ${{ secrets.QA_AZURE_USERNAME }}      
          key: ${{ secrets.QA_SSH_SECRET }}
          port: 22
          source: "*"      
          target: "~/source"
      - name: Start Service on QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.QA_IP_ADDRESS }}        
          username: ${{ secrets.QA_AZURE_USERNAME }}      
          key: ${{ secrets.QA_SSH_SECRET }}
          port: 22
          script: |
                /etc/init.d/yaml-poc stop
                mv ~/source/target/yaml-poc.jar ~/source/target/yaml-poc-old.jar
                mv ~/source/target/yaml-poc-latest.jar ~/source/target/yaml-poc.jar
                #rm -rf /etc/init.d/yaml-poc
                #ln -s -f ~/source/target/yaml-poc.jar /etc/init.d/yaml-poc
                /etc/init.d/yaml-poc start
  test:
    runs-on: ubuntu-latest
    environment: Test
    needs: build
    if: ${{ needs.build.outputs.branch == 'test' }}
    steps:
      - name: Upload application to test
        run: echo Uploaded artifact to test
      - name: Deploy on Test
        run: echo Deployed on Test successfull
      - name: create env file
        run: |
            touch .env
            echo DEV_IP_ADDRESS= "The IP Address is : "  ${{ secrets.DEV_IP_ADDRESS }} "   Masked"  >> .env
            echo PROD_IP_ADDRESS= " The Prod IP Address is : "  ${{ secrets.PROD_IP_ADDRESS }} "   Masked "  >> .env
            cat .env
      - name: read test.json
        id:   test
        uses: juliangruber/read-file-action@v1.1.4 
        with:
          path: ./test.json
      - name: dsiplay test.json
        run : echo "${{steps.test.outputs.content}}
      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          # The json file.
          filename: ./test.json
          # The prefix for variables.
        
